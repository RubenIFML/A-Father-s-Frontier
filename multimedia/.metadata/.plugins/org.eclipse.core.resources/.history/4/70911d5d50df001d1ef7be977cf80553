package ow_elements;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.Array;

import managers.ResourceManager;
import screens.OverWorldScreen;

    public class Protagonista extends Element{
        private Array<TextureRegion>[] animationArray;
        private Array<TextureRegion> idleArray;
        private Array<TextureRegion> frenteArray;
        private Array<TextureRegion> espaldaArray;
        private Array<TextureRegion> derechaArray;
        private Array<TextureRegion> izquierdaArray;
        private Animation<TextureRegion> idleFrente;
        private Animation<TextureRegion> idleIzquierda;
        private Animation<TextureRegion> idleDerecha;
        private Animation<TextureRegion> idleEspaldas;
        private Animation<TextureRegion> frente;
        private Animation<TextureRegion> espalda;
        private Animation<TextureRegion> derecha;
        private Animation<TextureRegion> izquierda;
        private boolean unaVez = false;
        private Sound pasos;

        public Protagonista(float x, float y, Stage s, OverWorldScreen nivel) {
            super(x, y, s);
            pasos=ResourceManager.getSound("02-OW/Audio/sounds/pasos.wav");

            animationArray = loadFullAnimation("02-OW/Personajes/personaje.protagonista_ow.png", 4, 7, 0.2f, true);

            idleArray = animationArray[0];
            frenteArray = animationArray[1];
            izquierdaArray = animationArray[2];
            derechaArray = animationArray[3];
            espaldaArray = animationArray[4];

            idleFrente = new Animation<TextureRegion>(0.15f, idleArray.get(0));
            idleIzquierda = new Animation<TextureRegion>(0.15f, idleArray.get(1));
            idleDerecha = new Animation<TextureRegion>(0.15f, idleArray.get(2));
            idleEspaldas = new Animation<TextureRegion>(0.15f, idleArray.get(3));
            
            frente = loadAnimationFromArray(frenteArray, 0.15f, true);
            espalda = loadAnimationFromArray(espaldaArray, 0.15f, true);
            derecha = loadAnimationFromArray(derechaArray, 0.15f, true);
            izquierda = loadAnimationFromArray(izquierdaArray, 0.15f, true);
            
            setAnimation(idleFrente);
            this.setPolygon(8, 32, 23, 5, 5);
        }

        @Override
        public void act(float delta) {
            super.act(delta);    
            if (Gdx.input.isButtonPressed(Input.Buttons.RIGHT)) {
                Vector2 clickPos = getStage().screenToStageCoordinates(new Vector2(Gdx.input.getX(), Gdx.input.getY()));
                Vector2 direction = new Vector2(clickPos).sub(getX(), getY());
                direction.nor();
                this.velocity.set(direction.scl(130));
                System.out.println("Velocidad y:" + velocity.y);
                System.out.println("Velocidad x:" + velocity.x);
                if (unaVez==true) {
                    pasos.play();
                    pasos.loop();    
                    unaVez=false;
                }
            } else {
                pasos.stop();
                this.velocity.y=0;
                this.velocity.x=0;
                unaVez=true;
            }
            animaciones();
            this.applyPhysics(delta);
        }

        /*
         * ARRIBA: 130
         * ABAJO : -130
         * DRCHA : 130
         * IZQDA : -130
         */
        
        private void animaciones() {
            if (this.velocity.isZero()) {
                float cursorX = Gdx.input.getX();
                float cursorY = Gdx.graphics.getHeight() - Gdx.input.getY();
                float protagonistaX = this.getX();
                float protagonistaY = this.getY();
                Vector2 direction = new Vector2(cursorX - protagonistaX, cursorY - protagonistaY);
                direction.nor();
                if (Math.abs(direction.y) > Math.abs(direction.x)) {
                    if (direction.y < 0) {
                        this.setAnimation(idleFrente);
                    } else {
                        this.setAnimation(idleEspaldas);
                    }
                } else {
                    if (direction.x > 0) {
                        this.setAnimation(idleDerecha);
                    } else {
                        this.setAnimation(idleIzquierda);
                    }
                }
            } else {
                if (Math.abs(this.velocity.y) > Math.abs(this.velocity.x)) {
                    if (this.velocity.y < 0) {
                        this.setAnimation(frente);
                    } else {
                        this.setAnimation(espalda);
                    }
                } else {
                    if (this.velocity.x > 0) {
                        this.setAnimation(derecha);
                    } else if (this.velocity.x < 0) {
                        this.setAnimation(izquierda);
                    } else {
                        this.setAnimation(idleFrente);
                    }
                }
            }
        }
