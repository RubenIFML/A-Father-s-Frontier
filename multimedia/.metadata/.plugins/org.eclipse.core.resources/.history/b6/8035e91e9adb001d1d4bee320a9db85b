package screens;

import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.scenes.scene2d.Action;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import game.Demo;
import game.Parametros;

public class StartScreen extends BScreen {
    private OrthographicCamera camera;
    private Batch batch;
    private Texture periodico;
    private Actor periodicoActor;
    private Texture blackBackground;
    private Actor blackBackgroundActor;
    private boolean desactivable = false;

    public StartScreen(Demo game) {
        super(game);

        camera = new OrthographicCamera();
        camera.setToOrtho(false, Parametros.getAltoPantalla(), Parametros.getAltoPantalla());

        batch = new SpriteBatch();

        switch (Parametros.dia) {
            case 1:
                periodico = new Texture("Menu/periodico.1_0.png");
                break;
            case 2:
                periodico = new Texture("Menu/periodico.2_0.png");
                break;
            case 3:
                periodico = new Texture("Menu/periodico.3_0.png");
                break;
        }

        blackBackground = new Texture("Menu/blackBackground.png");
        blackBackgroundActor = new Image(blackBackground);
        blackBackgroundActor.setSize(240, 180);
        this.uiStage.addActor(blackBackgroundActor);

        periodicoActor = new Image(periodico);
        periodicoActor.setSize(240, 180);
        this.uiStage.addActor(periodicoActor);
    }

    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
        if (button == Input.Buttons.LEFT && desactivable == true) {
            periodicoActor.remove();
            game.setScreen(new FrontierScreen(game));
        }

        return false;
    }

    @Override
    public void render(float delta) {

        super.render(delta);

        desactivable = true;

        uiStage.act();

        if (periodicoActor.getColor().a > 0) {
            // create action to gradually reduce opacity over 2 seconds
            Action fadeOutAction = new Action() {
                @Override
                public boolean act(float delta) {
                    float newAlpha = periodicoActor.getColor().a - delta / 2f;
                    if (newAlpha < 0) {
                        newAlpha = 0;
                    }
                    periodicoActor.setColor(new Color(1, 1, 1, newAlpha));
                    return newAlpha == 0;
                }
            };
            periodicoActor.addAction(fadeOutAction);
        } else {
            // remove periodicoActor when opacity is fully faded out
            periodicoActor.remove();
            game.setScreen(new FrontierScreen(game));
        }

        batch.begin();
        batch.draw(blackBackground, 0, 0, Parametros.getAnchoPantalla(), Parametros.getAltoPantalla());
        batch.end();

        uiStage.draw();
    }
}
