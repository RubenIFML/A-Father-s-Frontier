package screens;

import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import game.Demo;
import game.Parametros;

public class StartScreen extends BScreen{
private OrthographicCamera camera;
private Batch batch;
private Texture periodico;
private Actor periodicoActor;
private Texture blackBackground;
private Actor blackBackgroundActor;
private boolean desactivable = false;

public StartScreen(Demo game) {
    super(game);
    
    camera = new OrthographicCamera();
    camera.setToOrtho(false, Parametros.getAltoPantalla(), Parametros.getAltoPantalla());
    
    batch = new SpriteBatch();
    
    switch(Parametros.dia) {
        case 1: 
            periodico = new Texture("Menu/periodico.1_0.png");
            break;
        case 2:
            periodico = new Texture("Menu/periodico.2_0.png");
            break;
        case 3:
            periodico = new Texture("Menu/periodico.3_0.png");
            break;
    }
    
    blackBackground = new Texture("Menu/blackBackground.png");
    blackBackgroundDrawable = new NinePatchDrawable(new NinePatch(blackBackground, 4, 4, 4, 4));
    blackBackgroundActor = new Image(blackBackgroundDrawable);
    blackBackgroundActor.setSize(240,180);
    this.uiStage.addActor(blackBackgroundActor);
    
    periodicoDrawable = new Image(periodico).getDrawable();
    periodicoActor = new Image(periodicoDrawable);
    periodicoActor.setSize(240,180);
    this.uiStage.addActor(periodicoActor);
    
}

public boolean touchDown(int screenX, int screenY, int pointer, int button) {
    if (button == Input.Buttons.LEFT && desactivable == true) {
        game.setScreen(new FrontierScreen(game));
    }
    
    return false;
}

@Override
public void render(float delta) {
    super.render(delta);
    
    desactivable = true;
    
    uiStage.act();
    batch.begin();
    // Se le va reduciendo la opacidad al actor periodicoActor
    opacity -= delta * 0.5f;
    periodicoDrawable.setAlpha(opacity);
    blackBackgroundDrawable.draw(batch, 0, 0, Parametros.getAnchoPantalla(), Parametros.getAltoPantalla());
    batch.end();
    uiStage.draw();
    
    // Cuando la opacidad llega a cero se elimina el actor
    if(opacity <= 0) {
        periodicoActor.remove();
    }
}
