package ow_elements;

import com.badlogic.gdx.scenes.scene2d.Stage;

import screens.OverWorldScreen;

public class NpcMovil extends Element {
    private float velocidad;
    private int direccionMovimiento;
    private OverWorldScreen nivel;
    private int direccion;
    private boolean detenido;
    private Animation<TextureRegion> animacionAnterior;

    public NpcMovil(float x, float y, Stage s, OverWorldScreen nivel, String animacion, int direccion, float velocidad) {
        super(x, y, s);
        
        this.velocidad = velocidad;
        this.direccion = direccion;
        this.nivel = nivel;
        prepararAnimacion(animacion, true);
        this.setPolygon(8, 32, 23, 5, 5);

        if (direccion == 1) {
            direccionMovimiento = -1;
        } else if (direccion == 2) {
            direccionMovimiento = 1;
        }
    }

    public void act(float delta) {
        super.act(delta);
        
        if (!detenido) {
            if (direccion == 1) {
                moveBy(direccionMovimiento * this.velocidad * delta, 0);
            } else if (direccion == 2) {
                moveBy(0, direccionMovimiento * this.velocidad * delta);
            }
            
            comprobarColisiones();
            animaciones();
        }
    }

    private void comprobarColisiones() {
        for (Solid solido : this.nivel.solidos) {
            if (this.overlaps(solido)) {
                detenerMovimiento();
                break;
            }
        }
        
        if (this.nivel.prota.overlaps(this)) {
            this.nivel.prota.preventOverlap(this);
        }
    }

    private void detenerMovimiento() {
        detenido = true;
        animacionAnterior = this.getAnimation(); // Guardar la animación actual antes de detenerse
        
        if (direccionMovimiento > 0) {
            if (direccion == 1) {
                this.setAnimation(this.idleDerecha);
            } else if (direccion == 2) {
                this.setAnimation(this.idleEspaldas);
            }
        } else if (direccionMovimiento < 0) {
            if (direccion == 1) {
                this.setAnimation(this.idleIzquierda);
            } else if (direccion == 2) {
                this.setAnimation(this.idleFrente);
            }
        }
    }

    public void reanudarMovimiento() {
        detenido = false;
        this.setAnimation(animacionAnterior); // Restaurar la animación anterior
    }

    private void animaciones() {
        if (!detenido) {
            if (direccionMovimiento > 0) {
                if (direccion == 1) {
                    this.setAnimation(this.derecha);
                } else if (direccion == 2) {
                    this.setAnimation(this.espalda);
                }
            } else if (direccionMovimiento < 0) {
                if (direccion == 1) {
                    this.setAnimation(this.izquierda);
                } else if (direccion == 2) {
                    this.setAnimation(this.frente);
                }
            }
        }
    }
}