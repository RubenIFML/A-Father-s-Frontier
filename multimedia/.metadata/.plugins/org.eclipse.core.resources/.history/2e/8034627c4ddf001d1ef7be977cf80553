package ow_elements;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.Array;

import managers.ResourceManager;
import screens.OverWorldScreen;

public class Protagonista extends Element{
    private Array<TextureRegion>[] animationArray;
    private Array<TextureRegion> idleArray;
    private Array<TextureRegion> frenteArray;
    private Array<TextureRegion> espaldaArray;
    private Array<TextureRegion> derechaArray;
    private Array<TextureRegion> izquierdaArray;
    private Animation<TextureRegion> idle;
    private Animation<TextureRegion> frente;
    private Animation<TextureRegion> espalda;
    private Animation<TextureRegion> derecha;
    private Animation<TextureRegion> izquierda;
    
    private TextureRegion frenteIdle;
    private TextureRegion espaldaIdle;
    private TextureRegion derechaIdle;
    private TextureRegion izquierdaIdle;
    private boolean idleFlag = false;
    private float idleTimer = 0f;
    private boolean unaVez = false;
    private Sound pasos;

    public Protagonista(float x, float y, Stage s, OverWorldScreen nivel) {
        super(x, y, s);
        pasos=ResourceManager.getSound("02-OW/Audio/sounds/pasos.wav");

        animationArray = loadFullAnimation("02-OW/Personajes/personaje.protagonista_ow.png", 4, 7, 0.2f, true);

        idleArray = animationArray[0];
        frenteArray = animationArray[1];
        izquierdaArray = animationArray[2];
        derechaArray = animationArray[3];
        espaldaArray = animationArray[4];

        idle = loadAnimationFromArray(idleArray, 20, false);
        frente = loadAnimationFromArray(frenteArray, 0.15f, true);
        espalda = loadAnimationFromArray(espaldaArray, 0.15f, true);
        derecha = loadAnimationFromArray(derechaArray, 0.15f, true);
        izquierda = loadAnimationFromArray(izquierdaArray, 0.15f, true);
        
        setAnimation(idle);
        this.setPolygon(8, 32, 23, 5, 5);
    }

    @Override
    public void act(float delta) {
        super.act(delta);    
        if (Gdx.input.isButtonPressed(Input.Buttons.RIGHT)) {
            Vector2 clickPos = getStage().screenToStageCoordinates(new Vector2(Gdx.input.getX(), Gdx.input.getY()));
            Vector2 direction = new Vector2(clickPos).sub(getX(), getY());
            direction.nor();
            this.velocity.set(direction.scl(130));
            System.out.println("Velocidad y:" + velocity.y);
            System.out.println("Velocidad x:" + velocity.x);
            if (unaVez==true) {
                pasos.play();
                pasos.loop();    
                unaVez=false;
            }
            idleFlag = false;
            idleTimer = 0f;
        } else {
            pasos.stop();
            this.velocity.y=0;
            this.velocity.x=0;
            unaVez=true;
            idleFlag = true;
            idleTimer += delta;
            if (idleTimer >= 1f) {
                setIdleTextureRegion();
            }
        }
        animaciones();
        this.applyPhysics(delta);
    }

    /*
     * ARRIBA: 130
     * ABAJO : -130
     * DRCHA : 130
     * IZQDA : -130
     */
    
    private void animaciones() {
        if (Math.abs(this.velocity.y) > Math.abs(this.velocity.x)) {
            if (this.velocity.y < 0) {
                this.setAnimation(frente);
            } else {
                this.setAnimation(espalda);
            }
        } else {
            if (this.velocity.x > 0) {
                this.setAnimation(derecha);
            } else if (this.velocity.x < 0) {
                this.setAnimation(izquierda);
            } else {
                // Si la velocidad es cero, establecemos la textura correspondiente a la dirección del cursor
                Vector2 cursorPos = getStage().screenToStageCoordinates(new Vector2(Gdx.input.getX(), Gdx.input.getY()));
                if (cursorPos.y > getY()) {
                    // El cursor está por encima del personaje
                    this.setAnimation(espaldaIdle);
                } else if (cursorPos.y < getY()) {
                    // El cursor está por debajo del personaje
                    this.setAnimation(frenteIdle);
                } else if (cursorPos.x > getX()) {
                    // El cursor está a la derecha del personaje
                    this.setAnimation(derechaIdle);
                } else if (cursorPos.x < getX()) {
                    // El cursor está a la izquierda del personaje
                    this.setAnimation(izquierdaIdle);
                }
            }
        }
    }
    
    private void setIdleTextureRegion() {
        float cursorX = Gdx.input.getX();
        float cursorY = Gdx.input.getY();
        float protagonistX = this.getX();
        float protagonistY = this.getY();

        if (cursorX > protagonistX && Math.abs(cursorY - protagonistY) < Math.abs(cursorX - protagonistX)) {
            this.setTextureRegion(derechaArray.get(0));
        } else if (cursorX < protagonistX && Math.abs(cursorY - protagonistY) < Math.abs(cursorX - protagonistX)) {
            this.setTextureRegion(izquierdaArray.get(0));
        } else if (cursorY > protagonistY && Math.abs(cursorY - protagonistY) >= Math.abs(cursorX - protagonistX)) {
            this.setTextureRegion(frenteArray.get(0));
        } else if (cursorY < protagonistY && Math.abs(cursorY - protagonistY) >= Math.abs(cursorX - protagonistX)) {
            this.setTextureRegion(espaldaArray.get(0));
        }
    }
}
