package ow_elements;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;

import game.Parametros;
import managers.AudioManager;
import screens.OverWorldScreen;

public class NpcStatic extends Element {
	private OverWorldScreen nivel;
	private Texto interaccion;
	private int siguienteInteraccion = 0;
	private Image bocadillo;

	public NpcStatic(float x, float y, Stage s, OverWorldScreen nivel, String animacion, String direccion) {
		super(x, y, s);
		this.nivel = nivel;
		prepararAnimacion(animacion, false);
		switch (direccion) {
		case "frente":
			setAnimation(idleFrente);
			break;
		case "izquierda":
			setAnimation(idleIzquierda);
			break;
		case "derecha":
			setAnimation(idleDerecha);
			break;
		case "espaldas":
			setAnimation(idleEspaldas);
			break;
		}
		this.setPolygon(8, 32, 23, 5, 5);
	}

	public void act(float delta) {
	    super.act(delta);
	    float distanciaX = Math.abs(nivel.prota.getX() - getX());
	    float distanciaY = Math.abs(nivel.prota.getY() - getY());

	    comprobarColisiones();
	    bocadillo(distanciaX, distanciaY);

	    if (Gdx.input.justTouched() && distanciaX < 60 && distanciaY < 60 && estaClickeado(Gdx.input.getX(), Gdx.input.getY())) {
	        interactuar(distanciaX, distanciaY);
	    }
	}

	private boolean estaClickeado(float x, float y) {
	    int numVertices = this.getPolygon().getNumVertices();
	    float[] vertices = this.getPolygon().getTransformedVertices();
	    boolean dentro = false;

	    // Comprueba si el clic del mouse está dentro del polígono utilizando el algoritmo de intersección de línea
	    for (int i = 0, j = numVertices - 1; i < numVertices; j = i++) {
	        float xi = vertices[i * 2], yi = vertices[i * 2 + 1];
	        float xj = vertices[j * 2], yj = vertices[j * 2 + 1];
	        boolean intersecta = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
	        if (intersecta) dentro = !dentro;
	    }

	    return dentro;
	}
	
	private void comprobarColisiones() {
		if (this.nivel.prota.overlaps(this)) {
			this.nivel.prota.preventOverlap(this);
		}
	}
	
	private void bocadillo(float distanciaX, float distanciaY) {
		if (distanciaX < 60 && distanciaY < 60 &&
		        ((nivel.prota.getX() < getX() && nivel.prota.getY() < getY()) ||
		         (nivel.prota.getX() >= getX() && nivel.prota.getY() < getY()) ||
		         (nivel.prota.getX() < getX() && nivel.prota.getY() >= getY()) ||
		         (nivel.prota.getX() >= getX() && nivel.prota.getY() >= getY()))) {
		    // el personaje está cerca y en la dirección correcta, creamos y agregamos el actor bocadillo
		    if (bocadillo == null) {
		        bocadillo = new Image(new Texture("02-OW/Personajes/bocadillo_ow.png"));
		        bocadillo.setPosition(getX()+17, getY()-10 + getHeight() + 10); // ajustar la posición del bocadillo
		        nivel.mainStage.addActor(bocadillo);
		    }
		} else {
		    // el personaje se alejó o no está en la dirección correcta, eliminamos el actor bocadillo
		    if (bocadillo != null) {
		        bocadillo.remove();
		        bocadillo = null;
		    }
		}
	}
	
	private void interactuar(float distanciaX, float distanciaY) {
	    if (distanciaX < 60 && distanciaY < 60 &&
	            ((nivel.prota.getX() < getX() && nivel.prota.getY() < getY()) ||
	             (nivel.prota.getX() >= getX() && nivel.prota.getY() < getY()) ||
	             (nivel.prota.getX() < getX() && nivel.prota.getY() >= getY()) ||
	             (nivel.prota.getX() >= getX() && nivel.prota.getY() >= getY()))) {
	        // El jugador está cerca y en la dirección correcta
	        if (Gdx.input.justTouched()) {
	            Parametros.controlesActivos = false; // Se desactivan los controles del personaje
	            AudioManager.playSound("01-FS/Audio/sounds/menuBoton.wav");
	            switch (siguienteInteraccion) {
	                case 0:
	                    interaccion = new Texto("El río Támesis esconde grandes secretos\nen su interior...");
	                    this.nivel.uiStage.addActor(interaccion);
	                    siguienteInteraccion++;
	                    break;
	                case 1:
	                    interaccion.hide();
	                    interaccion = new Texto("En tiempos de guerra, la muerte puede\nsentirse desde su rivera...");
	                    this.nivel.uiStage.addActor(interaccion);
	                    siguienteInteraccion++;
	                    break;
	                case 2:
	                    interaccion.hide();
	                    Parametros.controlesActivos = true; // Se activan los controles del personaje
	                    siguienteInteraccion = 0; // Se reinicia el contador después de la última interacción
	                    break;
	            }
	        }
	    }
	}
}