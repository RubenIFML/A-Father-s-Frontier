package ow_elements;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;

import game.Parametros;
import managers.AudioManager;
import managers.ResourceManager;
import screens.OverWorldScreen;

/**
 * Establece los NPCs estáticos de la Ciudad.
 * @author Rubén Moya
 */
public class NpcStatic extends Element {
	private OverWorldScreen nivel;
	private Texto interaccion;
	private int siguienteInteraccion = 0;
	private Image bocadillo;
	private float elapsedTime = 0;
	private Element dialogBox;
	private String dialogo1;
	private String dialogo2;
	private String animacion;
	private String direccion;
	private Stage s;

	public NpcStatic(float x, float y, Stage s, OverWorldScreen nivel, String animacion, String direccion, String dialogo1, String dialogo2) {
		super(x, y, s);
		this.nivel = nivel;
		this.s = s;
		this.animacion = animacion;
		this.dialogo1 = dialogo1;
		this.dialogo2 = dialogo2;
		this.direccion = direccion;
		
		prepararAnimacion(animacion, false);
		switch (this.direccion) {
		case "frente":
			setAnimation(idleFrente);
			break;
		case "izquierda":
			setAnimation(getIdleIzquierda());
			break;
		case "derecha":
			setAnimation(idleDerecha);
			break;
		case "espaldas":
			setAnimation(idleEspaldas);
			break;
		case "cola":
			setAnimation(izquierda);
            this.animation.setPlayMode(Animation.PlayMode.LOOP);
			break;
		}
		this.setPolygon(8, 32, 23, 5, 5);
		
        switch (this.direccion) {
    	case "cola":
    		dialogBox=new Element(0,0,this.s,this.getWidth(),this.getHeight()/3);
    		break;
    	default:
    		dialogBox=new Element(0,0,this.s,this.getWidth(),this.getHeight());
    		break;
        }
		dialogBox.setPosition(this.getX(),this.getY());
		dialogBox.setRectangle();
	}

	public void act(float delta) {
	    super.act(delta);
	    float distanciaX = Math.abs(nivel.prota.getX() - getX());
	    float distanciaY = Math.abs(nivel.prota.getY() - getY());
	    
	    comprobarColisiones();
	    bocadillo(distanciaX, distanciaY);
	    
	    if(bocadillo!=null) {
		    if (elapsedTime < 1) {
		        bocadillo.setY(bocadillo.getY() + 3 * delta);
		    } else if (elapsedTime < 3) {
		    	bocadillo.setY(bocadillo.getY() - 3 * delta);
		    }

		    if (elapsedTime > 2) {
		        elapsedTime = 0;
		    } else {
		        elapsedTime += delta;
		    }
	    }
	    
	    if(siguienteInteraccion==0) {
		    if (Gdx.input.justTouched()) {
		        Vector2 clickCoords = nivel.mainStage.screenToStageCoordinates(new Vector2(Gdx.input.getX(), Gdx.input.getY()));
		        if (distanciaX < 60 && distanciaY < 60 && dialogBox.getBoundaryPolygon().contains(clickCoords.x, clickCoords.y) && !Parametros.interactuandoNpc) {
		            interactuar();
		        }
		    }
	    }
	    else {
	    	if (Gdx.input.justTouched()) {
		    		if(interaccion.completo==true) {
			    		interactuar();
		    		}
		    		else {
		    			interaccion.completo=true;
	    	            AudioManager.playSound("01-FS/Audio/sounds/menuBoton.wav");
		    		}
	    		}
	    }
	}

	/**
	 * Comprueba las colisiones del NpcStatic con el protagonista.
	 */
	private void comprobarColisiones() {
		if (this.nivel.prota.overlaps(this)) {
			this.nivel.prota.preventOverlap(this);
		}
	}

	/**
	 * Crea el actor bocadillo del NpcMision, el cual se oculta si el
	 * protagonista está lejos y aparece si está cerca. Si el protagonista
	 * todavía no ha completado la misión hoy, el bocadillo mostrará una
	 * exclamación, y si ya la ha completado, el bocadillo mostrará puntos
	 * suspensivos.
	 * @param distanciaX Distancia en "X" entre el npc y el protagonista.
	 * @param distanciaY Distancia en "Y" entre el npc y el protagonista.
	 */
	private void bocadillo(float distanciaX, float distanciaY) {
		if (distanciaX < 60 && distanciaY < 60 &&
		        ((nivel.prota.getX() < getX() && nivel.prota.getY() < getY()) ||
		         (nivel.prota.getX() >= getX() && nivel.prota.getY() < getY()) ||
		         (nivel.prota.getX() < getX() && nivel.prota.getY() >= getY()) ||
		         (nivel.prota.getX() >= getX() && nivel.prota.getY() >= getY()))) {
		    // el personaje está cerca y en la dirección correcta, creamos y agregamos el actor bocadillo
		    if (bocadillo == null) {
		        bocadillo = new Image(ResourceManager.getTexture("02-OW/Personajes/b.png"));
		        switch (this.direccion) {
		        	case "cola":
		        		bocadillo.setPosition(getX()+10, getY()-62 + getHeight() + 10); // ajustar la posición del bocadillo
		        		break;
		        	default:
		        		switch(this.animacion) {
		        		case "02-OW/Personajes/p.herido.png":
			        		bocadillo.setPosition(getX()+22, getY()-52 + getHeight() + 10); // ajustar la posición del bocadillo
		        			break;
		        		default:
			        		bocadillo.setPosition(getX()+17, getY()-10 + getHeight() + 10); // ajustar la posición del bocadillo
		        			break;
		        		}
		        		break;
		        }
		        bocadillo.setName("bocadillo");
		        nivel.mainStage.addActor(bocadillo);
		    }
		} else {
		    // el personaje se alejó o no está en la dirección correcta, eliminamos el actor bocadillo
		    if (bocadillo != null) {
		        bocadillo.remove();
		        bocadillo = null;
		    }
		}
	}
	
	private void interactuar() {
	    Parametros.controlesActivos = false; // se desactivan los controles del personaje
	    nivel.prota.pasos.stop();
	    
		    switch (siguienteInteraccion) {
	        case 0:
	        	Parametros.interactuandoNpc = true;
	        	AudioManager.playSound("01-FS/Audio/sounds/menuBoton.wav");
	            interaccion = new Texto(this.dialogo1, "talk1");
	            this.nivel.uiStage.addActor(interaccion);
	            siguienteInteraccion++;
	            break;
	        case 1:
	            AudioManager.playSound("01-FS/Audio/sounds/menuBoton.wav");
	            interaccion.hide();
	            interaccion = new Texto(this.dialogo2, "talk1");
	            this.nivel.uiStage.addActor(interaccion);
	            siguienteInteraccion++;
	            break;
	        case 2:
	            AudioManager.playSound("01-FS/Audio/sounds/menuBoton.wav");
	            interaccion.hide();
	            Parametros.controlesActivos = true; // se activan los controles del personaje
	        	Parametros.interactuandoNpc = false;
	            siguienteInteraccion = 0; // se reinicia el contador después de la última interacción
	            break;
		    }
	}
}