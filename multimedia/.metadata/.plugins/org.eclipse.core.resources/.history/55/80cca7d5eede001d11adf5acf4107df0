package ow_elements;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.Array;

import managers.ResourceManager;
import screens.OverWorldScreen;
public Protagonista(float x, float y, Stage s, OverWorldScreen nivel) {
    super(x, y, s);
	pasos=ResourceManager.getSound("02-OW/Audio/sounds/pasos.wav");

    animationArray = loadFullAnimation("02-OW/Personajes/personaje.protagonista_ow.png", 4, 7, 0.2f, true);

    idleArray = animationArray[0];
    frenteArray = animationArray[1];
    izquierdaArray = animationArray[2];
    derechaArray = animationArray[3];
    espaldaArray = animationArray[4];

    idle = loadAnimationFromArray(idleArray, 20, false);
    frente = loadAnimationFromArray(frenteArray, 0.15f, true);
    espalda = loadAnimationFromArray(espaldaArray, 0.15f, true);
    derecha = loadAnimationFromArray(derechaArray, 0.15f, true);
    izquierda = loadAnimationFromArray(izquierdaArray, 0.15f, true);
    
    setAnimation(idle);
    this.setPolygon(8, 32, 23, 5, 5);
}


@Override
public void act(float delta) {
	// TODO Auto-generated method stub
	super.act(delta);	
    if (Gdx.input.isButtonPressed(Input.Buttons.RIGHT)) {
        // Obtener la posición del click
        Vector2 clickPos = getStage().screenToStageCoordinates(new Vector2(Gdx.input.getX(), Gdx.input.getY()));
        // Calcular la dirección hacia la posición del click
        Vector2 direction = new Vector2(clickPos).sub(getX(), getY());
        // Normalizar la dirección
        direction.nor();
        // Multiplicar la velocidad máxima por la dirección y asignarla como velocidad del protagonista
        this.velocity.set(direction.scl(150));
        // Reproducir sonido de pasos
        if (unaVez==true) {
            pasos.play();
            pasos.loop();	
            unaVez=false;
        }
    } else {
        pasos.stop();
        this.velocity.y=0;
        this.velocity.x=0;
        unaVez=true;
    }
	animaciones();
	this.applyPhysics(delta);
}

	private void animaciones() {
		
		if(this.velocity.y!=0) {
			
			if (this.velocity.y<0) {
				this.setAnimation(frente);
			} else if(this.velocity.y>0) {
				this.setAnimation(espalda);
			}
			
		}else if(this.velocity.x!=0) {
			
			if(this.velocity.x>0) {
				this.setAnimation(derecha);
			} else if(this.velocity.x<0) {
				this.setAnimation(izquierda);
			}
			
		} else {
			this.setAnimation(idle);
		}
		
	}
}
